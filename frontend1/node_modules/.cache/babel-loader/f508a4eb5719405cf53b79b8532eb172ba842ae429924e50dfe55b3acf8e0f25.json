{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst API_URL = 'http://localhost:5000/api/todos';\n\n// Existing fetch, add, and delete actions...\n\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({\n  id,\n  updates\n}) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n  return response.json();\n});\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    // Existing cases for fetch, add, and delete...\n    builder.addCase(updateTodo.fulfilled, (state, action) => {\n      const index = state.findIndex(todo => todo._id === action.payload._id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  }\n});\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API_URL","updateTodo","id","updates","response","fetch","method","headers","body","JSON","stringify","json","todoSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","index","findIndex","todo","_id","payload","reducer"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/MERN/frontend/src/features/todoSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst API_URL = 'http://localhost:5000/api/todos';\n\n// Existing fetch, add, and delete actions...\n\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({ id, updates }) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(updates),\n  });\n  return response.json();\n});\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    // Existing cases for fetch, add, and delete...\n    builder.addCase(updateTodo.fulfilled, (state, action) => {\n      const index = state.findIndex((todo) => todo._id === action.payload._id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  },\n});\n\nexport default todoSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,OAAO,GAAG,iCAAiC;;AAEjD;;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAkB,EAAE,OAAO;EAAEG,EAAE;EAAEC;AAAQ,CAAC,KAAK;EACxF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIE,EAAE,EAAE,EAAE;IAC/CI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;EAC9B,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGd,WAAW,CAAC;EAC5Be,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACjB,UAAU,CAACkB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvD,MAAMC,KAAK,GAAGF,KAAK,CAACG,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKJ,MAAM,CAACK,OAAO,CAACD,GAAG,CAAC;MACxE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBF,KAAK,CAACE,KAAK,CAAC,GAAGD,MAAM,CAACK,OAAO;MAC/B;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAed,SAAS,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}